* Requirements
  Packages from melpa should be automatically downloaded, thanks to
use-package. There are however, couple of packages and snippets which
are not in any package repository. They need to be downloaded manually
first. Ideally, I want these stuff to be bootstraped like the rest
with some magic. Here is the list of stuff that need to be downloaded
manually first:

** ispell (osx only)
Install ispell by ~brew install ispell --with-lang-en~ (taken from
[[https://unix.stackexchange.com/a/84514/56144][this]] page).
** personal material theme

** move-lines
~git clone https://github.com/targzeta/move-lines.git~ and also don't
forget to add correct path down below.

** more?


* Global emacs configurations
** Interface

X-Bars
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  ;(show-paren-mode 1)
  (menu-bar-mode -1)
#+END_SRC

Disable startup screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
  (setq inhibit-startup-message t)
#+END_SRC

Deafult startup directory
#+BEGIN_SRC emacs-lisp
  (setq default-directory "~/")
#+END_SRC

Shortcut for `ffap`
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "s-f") 'ffap)
#+END_SRC

For detecting new lines, add the following otherwise text or tex or similar wouldn't navigate to the
EOL but rather to end of the paragraph.
#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
#+END_SRC

Set cursor as bar
#+BEGIN_SRC emacs-lisp
  ;(setq-default cursor-type 'bar)
  (setq-default cursor-type 'box)
  (blink-cursor-mode 0) ;;disable the blink
#+END_SRC

Focus to help window so that after, e.g., ~descrive-variable~, I could hit ~q~ to exit easily:
#+BEGIN_SRC emacs-lisp
  (setq help-window-select 1)
#+END_SRC

Overwrite/delete selection as you type
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode 1)
#+END_SRC

Hilight current line
#+BEGIN_SRC emacs-lisp
  (global-hl-line-mode 1)
#+END_SRC

Wraping, maybe yes, maybe no, have to see...
#+BEGIN_SRC emacs-lisp
  ;(global-visual-line-mode 1)
#+END_SRC

Better change case courtesy of [[https://oremacs.com/2014/12/23/upcase-word-you-silly/][oremacs]].
#+BEGIN_SRC emacs-lisp
  (defadvice upcase-word (before upcase-word-advice activate)
    (unless (looking-back "\\b" nil)
      (backward-word)))

  (defadvice downcase-word (before downcase-word-advice activate)
    (unless (looking-back "\\b" nil)
      (backward-word)))

  (defadvice capitalize-word (before capitalize-word-advice activate)
    (unless (looking-back "\\b" nil)
      (backward-word)))

#+END_SRC

Disable the background color when launching from termial
#+BEGIN_SRC emacs-lisp :tangle no
  (defun on-after-init ()
    (unless (display-graphic-p (selected-frame))
      (set-face-background 'default "unspecified-bg" (selected-frame))))

  (add-hook 'window-setup-hook 'on-after-init)
#+END_SRC

** Window navigation
#+BEGIN_SRC emacs-lisp
  (windmove-default-keybindings 'meta)
#+END_SRC

** buffer menu
Use ibuffer with shortcut similar to sublime
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer) ;; this shortcut needs to be changed
  (setq ibuffer-saved-filter-groups
	'(("poo"
	   ("dired" (mode . dired-mode))
	   ("emacs" (or
		     (name . "^\\*scratch\\*$")
		     (name . "^\\*Messages\\*$")))
	   ("Org" (mode . org-mode))
	   ("Magit"  (or
		      (mode . magit-mode)
		      (derived-mode . magit-mode)))
	   ("LaTeX" (or
		      (mode . latex-mode)
		      (mode . bibtex-mode)))
	   ("Help" (or (name . "\*Help\*")
		       (name . "\*Apropos\*")
		       (name . "\*info\*"))))))


  (add-hook 'ibuffer-mode-hook
	    '(lambda ()
	       ;(visual-line-mode nil)
	       (ibuffer-switch-to-saved-filter-groups "poo")))

  (setq ibuffer-show-empty-filter-groups nil)
#+END_SRC

** move-lines
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/etc/move-lines")
  (require 'move-lines)
  (global-set-key (kbd "<C-S-up>") 'move-lines-up)
  (global-set-key (kbd "<C-S-down>") 'move-lines-down)
#+END_SRC

** tabs
#+BEGIN_SRC emacs-lisp
  ;(setq tab-width 4) ; or any other preferred value
  ;(defvaralias 'c-basic-offset 'tab-width)
  ;(defvaralias 'cperl-indent-level 'tab-width)
  (setq-default indent-tabs-mode nil)
#+END_SRC

** duplicate line
#+BEGIN_SRC emacs-lisp
  ; duplicate line. JESUS FUCKING CHRIST EMACS :/
  (defun duplicate-line()
    (interactive)
    (move-beginning-of-line 1)
    (kill-line)
    (yank)
    (open-line 1)
    (next-line 1)
    (yank)
  )
  (global-set-key (kbd "C-S-d") 'duplicate-line)
#+END_SRC

** ispell
(macos only)
#+BEGIN_SRC emacs-lisp
  (if (eq system-type 'darwin)
      (setq ispell-program-name "/usr/local/Cellar/ispell/3.4.00/bin/ispell")
  )
#+END_SRC

** themeing
#+BEGIN_SRC emacs-lisp
  ;;(add-to-list 'custom-theme-load-path "~/.emacs.d/etc/yamt-theme")
  ;;(load-theme 'yamt)
  ;;(load-theme 'doom-vibrant) ;dark
  ;;(load-theme 'doom-one-light)
  ;;(load-theme 'doom-city-lights)
  (load-theme 'doom-acario-light) ;light
  ;;(load-theme 'doom-tomorrow-day)
  ;; tryig a new one
  ;;(add-to-list 'custom-theme-load-path "~/.emacs.d/etc/zaiste-emacs-theme")
  ;;(load-theme 'zaiste)


#+END_SRC

** activating inactive features
Narrowing
#+BEGIN_SRC emacs-lisp
  (put 'narrow-to-region 'disabled nil)
#+END_SRC

** Line numbers
#+BEGIN_SRC emacs-lisp
    (add-hook 'prog-mode-hook (lambda () (setq display-line-numbers 'relative)))
#+END_SRC


* Important packages
** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
#+END_SRC

** Auctex
 Some info regarding auctex and use-package [[https://github.com/jwiegley/use-package/issues/379#issuecomment-246161500][here]] and [[https://github.com/jwiegley/use-package/issues/379#issuecomment-258217014][here]].
 #+BEGIN_SRC emacs-lisp
   (use-package tex
     :defer t
     :ensure auctex
     :init
     (setq reftex-plug-into-AUCTeX t)  
     (setq TeX-source-correlate-mode t)
     (setq TeX-source-correlate-method 'synctex)
     (setenv "PATH" (concat "/usr/local/texlive/2020/bin/x86_64-linux:" (getenv "PATH")))
     (setq exec-path (append exec-path '("/usr/local/texlive/2020/bin/x86_64-linux")))
     :config
     (setq TeX-auto-save t)
     (setq font-latex-fontify-script nil)
     (setq TeX-error-overview-open-after-TeX-run t)
     (setq reftex-ref-macro-prompt nil) ;; changes the way reftex ask for referenced. for pageref set to t
     (add-hook 'LaTeX-mode-hook
       (lambda ()
         (reftex-mode 1)
         (define-key reftex-mode-map (kbd "C-c r") 'hydra-reftex-menu/body)
         (setq fill-column 80) ; or 80 or whatever
         (flyspell-mode 1)
         (flyspell-buffer)
         (visual-line-mode 1)
     ))
     ;; seting up pdf-tools:    
     (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
       TeX-source-correlate-start-server t)
     (add-hook 'TeX-after-compilation-finished-functions
               #'TeX-revert-document-buffer)

     ;; this will reuse the existing frame when doing forward or backward
     ;; search instead of opening/splitting a new one. credit goes to:
     ;; https://github.com/politza/pdf-tools/pull/60#issuecomment-82872269
     (setq pdf-sync-forward-display-action
           '(display-buffer-reuse-window (reusable-frames . t)))
     (setq pdf-sync-backward-display-action
           '(display-buffer-reuse-window (reusable-frames . t)))

     ;; this line allows includegraphics autocompletion to look at local directories
     ;; of the root for files. more at https://emacs.stackexchange.com/a/14011/19426
     (setq LaTeX-includegraphics-read-file 'LaTeX-includegraphics-read-file-relative)

     (setq-default display-line-numbers-type 'visual
                 display-line-numbers-current-absolute t
                 display-line-numbers-width 1
                 display-line-numbers-widen t)
     (display-line-numbers-mode 1)

     ;; shell-escape
     (add-to-list 'safe-local-variable-values
                  '(TeX-command-extra-options . "-shell-escape"))
     ;(local-set-key [C-tab] 'TeX-complete-symbol)
     ; (local-set-key [C-c C-r] 'hydra-reftex-menu/body)
   )
 #+END_SRC

** Bibtex
For reindent and pretty printing the bib items
#+BEGIN_SRC emacs-lisp
  (add-hook 'bibtex-mode-hook
    (lambda ()
      (setq fill-column 999999)
      (setq bibtex-align-at-equal-sign t)
      (setq fill-prefix nil)
      (local-set-key (kbd "M-q") 'bibtex-fill-entry)
    )
  )
#+END_SRC

Snippet below attempts to download bib items from a doi but needs further work ([[https://www.anghyflawn.net/blog/2014/emacs-give-a-doi-get-a-bibtex-entry/][source]]).
#+BEGIN_SRC emacs-lisp
  (defun get-bibtex-from-doi (doi)
   "Get a BibTeX entry from the DOI"
   (interactive "MDOI: ")
   (let ((url-mime-accept-string "text/bibliography;style=bibtex"))
     (with-current-buffer 
       (url-retrieve-synchronously 
	 (format "http://dx.doi.org/%s" 
	  (replace-regexp-in-string "http://dx.doi.org/" "" doi)))
       (switch-to-buffer (current-buffer))
       (goto-char (point-max))
       (setq bibtex-entry 
	    (buffer-substring 
		  (string-match "@" (buffer-string))
		(point)))
       (kill-buffer (current-buffer))))
   (insert (decode-coding-string bibtex-entry 'utf-8))
   (bibtex-fill-entry))
#+END_SRC

** multiple-cursor
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :bind (("C->" . mc/mark-next-like-this)
	   ("C-<" . mc/mark-previous-like-this)
	   ("C-S-l" . mc/edit-lines)
	  )
  )
#+END_SRC

** expand-region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind
    ("C-=" . er/expand-region)
    ("S-=" . er/mark-inside-pairs)
  )
#+END_SRC

** try
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC

** which key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :config (which-key-mode)
  )
#+END_SRC
** rainbow
rainbow-mode and
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :hook prog-mode)
#+END_SRC 
for the brakcets:
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
  (progn
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)))
#+END_SRC
** decoration
Highlight numbers
#+BEGIN_SRC emacs-lisp
  (use-package highlight-numbers
    :ensure t
    :init
    (add-hook 'prog-mode-hook 'highlight-numbers-mode))
#+END_SRC
** Org mode stuff
Syntax highlighting for code blocks:
#+BEGIN_SRC emacs-lisp :tangle no
  (setq org-src-fontify-natively t)
#+END_SRC

Org agenda configuration:
#+BEGIN_SRC emacs-lisp :tangle no
  ;(setq org-agenda-files (list "~/Work/Agenda/january.org"
  ;			     "~/Work/Agenda/february.org"
  ;			     "~/Work/Agenda/march.org"))

  (setq org-agenda-files (quote ("~/Work/Agenda/january.org")))
#+END_SRC

Better org bullets:
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
** Helm
Lets try again
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package helm
    :ensure t
    :bind
    ;("C-x C-f" . 'helm-find-files)
    ("C-x b" . 'helm-mini) ; C-Up/C-Down or C-c C-f to make it permanent
    ;("M-x" . 'helm-M-x)
    :config
    (setq helm-autoresize-max-height 30
	  helm-autoresize-min-height 20
	  helm-split-window-in-side-p nil
	  helm-split-window-inside-p t
	  helm-M-x-fuzzy-match t
	  helm-buffers-fuzzy-matching t
	  helm-recentf-fuzzy-match t
	  helm-semantic-fuzzy-match t
	  helm-imenu-fuzzy-match t))
    ;:init
    ;(helm-mode 1)
    ;)

  (helm-autoresize-mode 1)
  (define-key helm-find-files-map "\t" 'helm-execute-persistent-action)
#+END_SRC

** Predictive mode
I really like this. It is fast and rather helpfull when writing text, e.g., Latex, but it is paint to install. If it is installed, then I like to use the following shortcuts. [[http://www.dr-qubit.org/predictive/predictive-user-manual/predictive-user-manual.pdf][Manual]]
Also, 97ba1dd47beaef4b1b44a532e362d66872219d1b is a working commit...
#+BEGIN_SRC emacs-lisp :tangle no
  (if (eq system-type 'gnu/linux)
      (progn
	(message "Setting predictive path...")
	(add-to-list 'load-path "~/.emacs.d/predictive")
	(add-to-list 'load-path "~/.emacs.d/predictive/misc")
	(add-to-list 'load-path "~/.emacs.d/predictive/latex")
	(add-to-list 'load-path "~/.emacs.d/predictive/texinfo")
	(add-to-list 'load-path "~/.emacs.d/predictive/html")
	(setq predictive-latex-electric-environments 1) ; this one autocompletes envs
	(setq completion-ui-use-echo nil)
	(setq completion-auto-show nil)
	(setq predictive-learn-from-buffer t)
	(require 'predictive)
	(eval-after-load 'completion-ui
	  '(define-key completion-overlay-map "\t" 'completion-accept)))
    )

#+END_SRC

** smartparens
In the future I will check paredit, but for the moment:
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    ;:diminish smartparens-mode
    :config
    (progn
      (require 'smartparens-config)
      (show-smartparens-global-mode 1)
      (smartparens-global-mode 1))
    ;:bind
    ;(("bla" . fla-func)
    ; ("foo" . foo-func))
    )
#+END_SRC
** diminish
This can be done directly with the ~use-package~ but I do it like this:
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package diminish
    :ensure t
    :init
    (diminish 'smartparens-mode)
    (diminish 'which-key-mode)
    (diminish 'rainbow-mode)
    (diminish 'auto-completion-mode)
    )
#+END_SRC

** pdf-tools
This one seems interesting. I will see if I can use it with latex...
#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
    :ensure t
    ; :pin manual ;; manually update taken from http://pragmaticemacs.com/emacs/more-pdf-tools-tweaks/
    :config
    (pdf-tools-install)
    ; alternatively if it becomes annoying (pdf-loader-install)
  )
#+END_SRC

** markdown-mode
   Don't forget to set path to (e.g.) ~pandoc~ in the custom file as shown [[https://stackoverflow.com/a/19740648/811098][here]].
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode (("README\\.md\\'" . gfm-mode)
	   ("\\.md\\'" . markdown-mode)
	   ("\\.markdown\\'" . markdown-mode))
    :init
    ;(setq markdown-command "multimarkdown")
    (setq markdown-command "/usr/bin/pandoc")  
    )
#+END_SRC

** wc-mode
#+BEGIN_SRC emacs-lisp :tangle no
  (add-to-list 'load-path "~/.emacs.d/etc/wc-mode")
  (require 'wc-mode)
  ;(require 'wc-doom-mode)
#+END_SRC

** auto-gls-mode
This package automatically adds the glossaries macro to acronyms
#+BEGIN_SRC emacs-lisp :tangle no
  (add-to-list 'load-path "~/.emacs.d/etc/auto-glossaries-mode")
  (require 'auto-glossaries-mode)
#+END_SRC

** company
I guess I finally decided to go with this one...
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 1))

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    (define-key company-active-map (kbd "Tab") #'company-complete-common-or-cycle))

#+END_SRC

** python stuff
I will do python using elpy. Documenation at [[https://github.com/jorgenschaefer/elpy][github-page]] and [[https://elpy.readthedocs.io/en/latest/ide.html][read-the-docs]].
#+BEGIN_SRC emacs-lisp

    (use-package highlight-indent-guides
      :ensure t
      :config
      (setq highlight-indent-guides-method 'character)
      :hook (python-mode . highlight-indent-guides-mode))

    (use-package jedi
    :ensure t)  

    (use-package elpy
      :ensure t
      :defer t
      :init
      (advice-add 'python-mode :before 'elpy-enable)
      :config
      (setq elpy-modules (delq 'elpy-module-highlight-indentation elpy-modules))
      (setq elpy-rpc-python-command "python3")
      (setq elpy-rpc-backend "jedi")
      (setq python-shell-interpreter "ipython"
          python-shell-interpreter-args "-i --simple-prompt"))
#+END_SRC

** doom linemode setup
First install ~all-the-icons~ by
#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :ensure t)
#+END_SRC
then ~M-x all-the-icons-install-fonts~. Finally bootstrap the doom-modeline
#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
	:ensure t
	:hook (after-init . doom-modeline-mode)
	:config
	(setq doom-modeline-height 15))
#+END_SRC
** doom themes
Maybe it is easier to do ~M-x package-install RET doom-themes~. Further documentation at [[https://github.com/hlissner/emacs-doom-themes][github]] page.

** anzu 
This package shows the number of search occurances in the modeline
#+BEGIN_SRC emacs-lisp
  (use-package anzu
    :ensure t
    :config
    (global-anzu-mode +1))
#+END_SRC

** jumping around
I might replace this later with avy because it is maintained and more configurable. But out of the bot I like ace more.
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package ace-jump-mode
    :ensure t
    :bind (("M-g w" . ace-jump-word-mode)
	   ("M-g c" . ace-jump-char-mode)
	   ("M-g l" . ace-jump-line-mode)))
#+END_SRC

Later has come. Trying avy now...
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :config
    (setq avy-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)) ;default
    ;;(setq avy-keys '(?a ?s ?d ?f))
    (setq avy-background t)
    (setq avy-case-fold-search nil)
    :bind (("M-g w" . avy-goto-word-1)
	   ("M-g c" . avy-goto-char-2)
	   ("M-g l" . avy-goto-line)))
#+END_SRC

** hydra
Seems interesting. Perhapse have to create a different el file for all the hydras.
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package hydra
    :ensure t
    :config
    (add-to-list 'load-path "~/.emacs.d/etc/hydras"))
    (load "all-hydras")
#+END_SRC

** c++ 
with irony and company and we will see how it goes...
#+BEGIN_SRC emacs-lisp :tangle no
  (add-hook 'c++-mode-hook 'yas-minor-mode)
  (add-hook 'c-mode-hook 'yas-minor-mode)

  ;; overwrite the annoying tab size
  (setq c-basic-offset 4)

  ;;; *based on* https://github.com/Andersbakken/rtags/issues/1340

  ;; rags:
  (use-package rtags
    :ensure t
    :config
    (setq rtags-find-file-case-insensitive t)
    (setq rtags-symbolnames-case-insensitive t)
    (setq rtags-autostart-diagnostics t)
    ;; don't know about this one
    ;(setq rtags-timeout 1100)
    ;; trying to use irony completion
    (setq rtags-completions-enabled t)
    ;; don't konw about this one either
    ;(rtags-set-periodic-reparse-timeout 1.8)


    (define-key c-mode-base-map (kbd "M-.") #'rtags-find-symbol-at-point)
    (define-key c-mode-base-map (kbd "M-,") #'rtags-find-references-at-point)
    (define-key c-mode-base-map (kbd "M-;") #'rtags-find-file)
    (define-key c-mode-base-map (kbd "C-.") #'rtags-find-symbol)
    (define-key c-mode-base-map (kbd "C-,") #'rtags-find-references)
    (define-key c-mode-base-map (kbd "C-<") #'rtags-find-virtuals-at-point)
    (define-key c-mode-base-map (kbd "M-i") #'rtags-imenu)

    )

  (use-package company-rtags
    :ensure t
    :defer)

  ;; TODO: fix the colors for warnings
  (use-package flycheck-rtags
    :ensure t
    :after rtags
    :init
    (defun my-flycheck-rtags-setup ()
      (flycheck-select-checker 'rtags)
      (setq-local flycheck-highlighting-mode nil) ;; RTags creates more accurate overlays.
      (setq-local flycheck-check-syntax-automatically nil)
      (flycheck-mode t))
    :config
    (add-hook 'c++-mode-hook #'my-flycheck-rtags-setup)
    (add-hook 'c-mode-hook #'my-flycheck-rtags-setup)
  )

  (use-package flycheck
    :ensure t)


  ;; TODO: set build directory reletive to current project
  (use-package cmake-ide
    :ensure t
    :after cc-mode
    :config
    (cmake-ide-setup)
    )

  ;;; setting company stuff from https://lupan.pl/dotemacs/
  (defun set-company-backends ()
    ;(delete 'company-backends 'company-clang)
    (setq company-backends (delete 'company-clang company-backends))
    (add-to-list 'company-backends 'company-c-headers)
    ;(set (make-local-variable 'company-backends) '(company-rtags))
    (add-to-list  'company-backends 'company-rtags)
    (add-to-list  'company-backends 'company-cmake)
    (company-mode)
    (define-key c-mode-base-map (kbd "C-<tab>") #'company-complete) 
    )


  (add-hook 'c-mode-hook #'set-company-backends)
  (add-hook 'c++-mode-hook #'set-company-backends)

#+END_SRC

** yasnippet
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package yasnippet
    :ensure t
    :config
    (setq yas-triggers-in-field t)
    (use-package yasnippet-snippets
      :ensure t))
#+END_SRC

** htmlize
which is mostly needed for org-mode export to html
#+BEGIN_SRC emacs-lisp
(use-package htmlize
   :ensure t)
#+END_SRC

** cmake-mode
The ~.el~ file is from the Kitware's official [[https://github.com/Kitware/CMake/blob/master/Auxiliary/cmake-mode.el][cmake-mode.el]] which tries to bootstrap it.
#+BEGIN_SRC emacs-lisp :tangle no
  (unless (file-directory-p "~/.emacs.d/etc/cmake-mode")
    (make-directory "~/.emacs.d/etc/cmake-mode")
    (url-copy-file "https://raw.githubusercontent.com/Kitware/CMake/master/Auxiliary/cmake-mode.el" "~/.emacs.d/etc/cmake-mode/cmake-mode.el" t))

  (setq load-path (cons (expand-file-name "~/.emacs.d/etc/cmake-mode") load-path))
  (require 'cmake-mode)
  (setq auto-mode-alist
	(append '(("CMakeLists\\.txt\\'" . cmake-mode)
		  ("\\.cmake\\'" . cmake-mode))
		auto-mode-alist))
#+END_SRC


* Useful snippets
** word repetition, taken from [[https://www.gnu.org/software/emacs/manual/html_node/eintr/the_002dthe.html][here]]. Although, it's a bit iffy...
#+BEGIN_SRC emacs-lisp
  (defun the-the ()
    "Search forward for for a duplicated word."
    (interactive)
    (message "Searching for for duplicated words ...")
    (push-mark)
    ;; This regexp is not perfect
    ;; but is fairly good over all:
    (if (re-search-forward
	 "\\b\\([^@ \n\t]+\\)[ \n\t]+\\1\\b" nil 'move)
	(message "Found duplicated word.")
      (message "End of buffer")))
#+END_SRC

** add some missing articles when proofreading papers
#+BEGIN_SRC emacs-lisp  :tangle no
  (defun articlize (txt)
    "Simply adds 'the' and 'a' to the current word"
    (forward-word)
    (backward-word)
    (insert txt)
    )

  (global-set-key (kbd "C-S-t") (lambda () (interactive) (articlize "the ")))
  (global-set-key (kbd "C-S-a") (lambda () (interactive) (articlize "a ")))
#+END_SRC

** eval and replace thanks to [[https://emacsredux.com/blog/2013/06/21/eval-and-replace/][emacsredux]]
#+BEGIN_SRC emacs-lisp
  (defun eval-and-replace ()
    "Replace the preceding sexp with its value."
    (interactive)
    (backward-kill-sexp)
    (condition-case nil
	(prin1 (eval (read (current-kill 0)))
	       (current-buffer))
      (error (message "Invalid expression")
	     (insert (current-kill 0)))))

  ;(global-set-key (kbd "C-c e") 'eval-and-replace)

#+END_SRC

** Complete file names
Courtesy of [[https://www.emacswiki.org/emacs/CompleteFileName][emacs-wiki]], this helps to complete file names in buffer. Should be called repeatedly thgouh...
#+BEGIN_SRC emacs-lisp :tangle no
  (fset 'my-complete-file-name
	(make-hippie-expand-function '(try-complete-file-name-partially
				       try-complete-file-name)))
  (global-set-key "\M-/" 'my-complete-file-name)
#+END_SRC

** Some color options for themes
   Particularly for doom-one-light
   #+BEGIN_SRC emacs-lisp :tangle no
  (custom-theme-set-faces 'doom-one-light
			  `(org-level-1 ((t (:foreground "black" :bold t :height 1.1))))
			  `(org-level-2 ((t (:foreground "black" :bold t :height 1.0))))
			  `(default ((t (:background "#F9F9F9" :foreground "#13161B")))))
   #+END_SRC


* Packages to be considered
1. [[https://github.com/gonewest818/dimmer.el][dimmer.el]]
2. [[https://github.com/mkcms/interactive-align][ialign.el]]
